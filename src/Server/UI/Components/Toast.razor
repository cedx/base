@namespace Belin.Base.UI.Components
@using System.Globalization

<toaster-item autoHide="@AutoHide" caption="@Caption" context="@Context" culture="@Culture" delay="@Delay" fade="@Fade" icon="@Icon" open="@Open">
	<div class="toast" data-bs-animation="@(Fade ? "true" : "false")" data-bs-autohide="@(AutoHide ? "true" : "false")" data-bs-delay="@Delay">
		<div class="toast-header toast-header-@Context.ToCss()">
			<i class="icon me-2 text-@Context.ToCss()">@(string.IsNullOrEmpty(Icon) ? Context.GetIcon() : Icon)</i>
			<b class="me-auto">@Caption</b>
			<small class="text-secondary"><!-- Toast.ElapsedTime --></small>
			<button class="btn-close" data-bs-dismiss="toast" type="button"></button>
		</div>
		<div class="toast-body">
			@ChildContent
		</div>
	</div>
</toaster-item>

@code {
	/// <summary>
	/// Value indicating whether to automatically hide this toast.
	/// </summary>
	[Parameter]
	public bool AutoHide { get; set; }

	/// <summary>
	/// The title displayed in the header.
	/// </summary>
	[Parameter]
	public string Caption { get; set => field = value.Trim(); } = "";

	/// <summary>
	/// The child content.
	/// </summary>
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	/// <summary>
	/// A contextual modifier.
	/// </summary>
	[Parameter]
	public Context Context { get; set; } = Context.Info;

	/// <summary>
	/// The culture used to format the relative time.
	/// </summary>
	[Parameter]
	public CultureInfo Culture { get; set; } = CultureInfo.CurrentCulture;

	/// <summary>
	/// The delay, in milliseconds, to hide this toast.
	/// </summary>
	[Parameter]
	public int Delay { get; set; } = 5_000;

	/// <summary>
	/// Value indicating whether to apply a transition.
	/// </summary>
	[Parameter]
	public bool Fade { get; set; }

	/// <summary>
	/// The icon displayed next to the caption.
	/// </summary>
	[Parameter]
	public string? Icon { get; set; }

	/// <summary>
	/// Value indicating whether to initially show this component.
	/// </summary>
	[Parameter]
	public bool Open { get; set; }
}
