@namespace Belin.Base.UI.Components
@using Belin.Base.UI

<dialog-button context="@Context" icon="@Icon" label="@Label" value="@Value" variant="@Variant">
	<button class="@classList" type="button" value="@Value">
		<i class="icon @(Label.Length > 0 ? "me-1" : string.Empty)" hidden="@string.IsNullOrEmpty(Icon)">@Icon</i>
		<span hidden="@Label.Length == 0">@Label</span>
	</button>
</dialog-button>

@code {
	/// <summary>
	/// A contextual modifier.
	/// </summary>
	[Parameter]
	public Context? Context { get; set; }

	/// <summary>
	/// The button icon.
	/// </summary>
	[Parameter]
	public string? Icon { get; set; }

	/// <summary>
	/// The button label.
	/// </summary>
	[Parameter]
	public string Label { get; set => field = value.Trim(); } = string.Empty;

	/// <summary>
	/// The button value.
	/// </summary>
	[Parameter]
	public DialogResult Value { get; set; } = DialogResult.None;

	/// <summary>
	/// A tone variant.
	/// </summary>
	[Parameter]
	public Variant? Variant { get; set; }

	/// <summary>
	/// The CSS classes applied to the button.
	/// </summary>
	private string classList =>
		$"btn {(Context is Context context ? $"btn-{context.ToCss()}" : string.Empty)} {(Variant is Variant variant ? $"btn-{variant.ToCss()}" : string.Empty)}".TrimEnd();
}
